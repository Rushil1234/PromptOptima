# 📦 LLM OPTIMIZER CHROME EXTENSION

## ⚡ Quick Install (For Recipients)

### What You'll Need
- Google Chrome browser
- 5 minutes

### Installation Steps

#### 1. Extract the ZIP
- Unzip `LLM-Optimizer-Extension.zip` to a permanent folder
- **Important**: Don't delete this folder after installation!
- Suggested location: `C:\LLM-Optimizer-Extension\`

#### 2. Open Chrome Extensions
- Open Google Chrome
- Type in address bar: `chrome://extensions`
- Or click Menu (⋮) → Extensions → Manage Extensions

#### 3. Enable Developer Mode
- Look for "Developer mode" toggle in the top-right corner
- Turn it **ON**

#### 4. Load the Extension
- Click the "Load unpacked" button
- Navigate to the folder where you extracted the ZIP
- Select the folder and click "Select Folder"

#### 5. Pin the Extension (Optional but Recommended)
- Click the puzzle piece icon (🧩) in Chrome toolbar
- Find "LLM Optimizer"
- Click the pin icon to keep it visible

#### 6. Done!
- You should see a ⚡ icon in your Chrome toolbar
- Click it to start compressing prompts!

---

## 🎯 How to Use

### Basic Compression
1. **Click** the ⚡ extension icon
2. **Choose** a strategy:
   - **LLMLingua**: Best for general prompts (60-80% compression)
   - **SynthLang**: Best for technical content (60-93% compression)
3. **Enter** your prompt in the text box
4. **Click** "Compress Prompt" (or press Ctrl+Enter)
5. **See** your compressed result with statistics
6. **Copy** to clipboard and use in ChatGPT, Claude, etc.!

### Advanced Features
- **Context Menu**: Right-click selected text → "Compress with LLM Optimizer"
- **Export**: Click 💾 to download results as JSON
- **History**: Your last 10 compressions are saved automatically
- **Settings**: Click ⚙️ at the bottom to configure

---

## ⚙️ Configuration (Optional)

### If Using Your Own Backend

1. Click the extension icon
2. Click "Settings" at the bottom
3. Update "API Endpoint URL" to your backend server
4. Click "Test Connection"
5. Save settings

**Default**: `http://localhost:3001` (for local development)

---

## 🐛 Troubleshooting

### Extension icon doesn't appear
→ Click the puzzle piece (🧩) in Chrome toolbar and pin it

### "Connection Failed" error
→ The backend API is not running or not accessible. Contact the developer for the API endpoint.

### Empty compressed output
→ Check Settings → Test Connection to verify backend is working

### Extension disappeared after restart
→ Chrome may have disabled it. Go to `chrome://extensions` and re-enable it

---

## ❓ FAQ

**Q: Is this free?**
A: Yes! The extension is completely free. API usage depends on your backend configuration.

**Q: Does it work offline?**
A: SynthLang strategy works offline. LLMLingua requires an API connection.

**Q: Is my data secure?**
A: All data is processed via the configured backend API. Nothing is sent to third parties. History is stored locally on your computer only.

**Q: Can I use this in production?**
A: Yes! Just configure your production API endpoint in Settings.

**Q: How do I uninstall?**
A: Go to `chrome://extensions`, find "LLM Optimizer", and click "Remove".

---

## 📊 Features

✅ Dual compression strategies
✅ Real-time character counter
✅ Before/after comparison
✅ Copy to clipboard
✅ Export as JSON
✅ Compression history (last 10)
✅ Usage statistics
✅ Keyboard shortcuts
✅ Dark theme
✅ Context menu integration

---

## 📖 Learn More

- **Documentation**: See included README.md files
- **Source Code**: https://github.com/Rushil1234/harvardhackdesgin1
- **Report Issues**: https://github.com/Rushil1234/harvardhackdesgin1/issues

---

## 🎉 Start Compressing!

Click the ⚡ icon and try compressing your first prompt!

**Example prompt to try**:
```
I need you to explain how machine learning algorithms work in detail. Please provide comprehensive examples from different domains including computer vision, natural language processing, and recommendation systems. Make sure to include the mathematical foundations and practical applications of each algorithm type.
```

Watch it compress by 60-80% while keeping the meaning intact!

---

Made with 💜 for efficient AI interactions
